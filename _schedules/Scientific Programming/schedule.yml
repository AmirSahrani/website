Welcome:
    Read the syllabus to get started: /syllabus
    Install python: /python/en/installing

SP1 - L1 (Algorithms):

    Scientific Programming 1 - Level 1 (Algorithms): /algorithms/en/intro2

    Getting started:
        Basic elements of Python [theory]: /python/en/basics
        Basic elements of Python [practice]: /python/en/basics/practice
        Check your water usage [assignment]: /algorithms/en/water

    Algorithms:
        Learn about algorithms [theory]: /python/en/algorithms
        Practice with algorithms [practice]: /python/en/algorithms/practice

    Loops:
        Learn about for-loops [theory]: /python/en/loops/for
        Practice with for-loops [practice]: /python/en/loops/for/practice
        Learn about while-loops [theory]: /python/en/loops/while
        Practice with while-loops [practice]: /python/en/loops/while/practice
        Some typical uses of loops [theory]: /python/en/loops/practical-uses
        Practice more with loops [practice]: /python/en/loops/practical-uses/practice

    Pyramid:
        Build a Mario Pyramid [assignment]: /algorithms/en/pyramid

    Change:
        Looking for trouble [theory]: /python/en/debugging-basics
        Understand how to write good code [theory]: /python/en/style
        Calculate change [assignment]: /algorithms/en/greedy
        Review the previous assignment [peer review]: /peer/greedy

    Plotting graphs:
        Learn about lists [theory]: /python/en/lists
        Practice with lists [practice]: /python/en/lists/practice
        For loop strategies [theory]: /python/en/loops/element-vs-index
        Learn how to use modules [theory]: /python/en/modules
        Learn about plotting in Python [theory]: /python/en/plotting
        Visualize data with plots [assignment]: /plot/en/

    Submit:
        Submit your solutions: /submit/algorithms

Number theory (SP1 - level 1):
    Introduction: /numbers/en/intro2

    Getting started:
        Basic elements of Python [theory]: /python/en/basics
        Basic elements of Python [practice]: /python/en/basics/practice
        Create a Number Whiz [assignment]: /numbers/en/whiz

    Algorithms:
        Learn about algorithms [theory]: /python/en/algorithms
        Practice with algorithms [practice]: /python/en/algorithms/practice

    Loops:
        Learn about for-loops [theory]: /python/en/loops/for
        Practice with for-loops [practice]: /python/en/loops/for/practice
        Learn about while-loops [theory]: /python/en/loops/while
        Practice with while-loops [practice]: /python/en/loops/while/practice
        Some typical uses of loops [theory]: /python/en/loops/practical-uses
        Practice more with loops [practice]: /python/en/loops/practical-uses/practice

    Leap:
        Find leap-years [assignment]: /numbers/en/leap
        Find birthdays of leap-year babies [assignment]: /numbers/en/birthday

    Prime numbers:
        Looking for trouble [theory]: /python/en/debugging-basics
        Look for prime numbers [assignment]: /numbers/en/primes
        Learn about lists [theory]: /python/en/lists
        Practice with lists [practice]: /python/en/lists/practice
        For loop strategies [theory]: /python/en/loops/element-vs-index
        Make lists of prime numbers [assignment]: /numbers/en/primelist

    Number theory:
        Understand how to write good code [theory]: /python/en/style
        Prove (?) Goldbach's conjecture [assignment]: /numbers/en/goldbach

    Plotting graphs:
        Learn how to use modules [theory]: /python/en/modules
        Learn about plotting in Python [theory]: /python/en/plotting
        Visualize data with plots [assignment]: /plot/en/

    Submit:
        Submit your solutions: /submit/numbers

Numerical integration (SP1 - level 2):
    Introduction: /integrals/en/intro2
    Roots:
        Learn about functions in Python [theory]: /python/en/functions
        Practice with functions on paper [practice]: /python/en/functions-book
        Practice with functions in Python [practice]: /python/en/functions/practice
        Determine the roots of a polynomial [assignment]: /integrals/en/roots

    Riemann:
        Learn more about the Riemann sum [theory]: /integrals/en/riemann/explanation
        Compute the Riemann sum [assignment]: /integrals/en/riemann/integrals

    Random:
        Learn more about random numbers [theory]: /python/en/random
        Random fact [assignment]: /integrals/en/random/fact
        Calculate the average distance between two points in a square [assignment]: /integrals/en/random/distance
        Analyse with a histogram the output of the `random` function [assignment]: /integrals/en/random/histogram

    Monte Carlo:
        Learn about functions as arguments of other functions [theory]: /python/en/functions2
        Learn more about the Monte-Carlo method [theory]: /integrals/en/monte-carlo/explanation
        Calculate integrals with the Monte Carlo method [assignment]: /integrals/en/monte-carlo/integrals
        Calculate the surface of an odd shape [assignment]: /integrals/en/monte-carlo/egg
    Submit:
        Submit your solutions: /submit/integrals

Text processing (SP1 - level 2):
    Introduction: /text/en/intro2

    Text statistics:
        Learn about functions in Python [theory]: /python/en/functions
        Practice with functions on paper [practice]: /python/en/functions-book
        Practice with functions in Python [practice]: /python/en/functions/practice
        Learn about strings [theory]: /python/en/strings
        Calculate basic statistics for a text [assignment]: /text/en/statistics

    Text cleanup:
        Analyze text content word-by-word [assignment]: /text/en/words
        Reformat a text neatly [assignment]: /text/en/reformatting

    Sentiment analysis:
        Learn how to read text from files [theory]: /python/en/file-io
        Learn to analyse and process a data set [theory]: /python/en/files
        Perform a sentiment analysis [assignment]: /text/en/sentiment
        Present an overview of Twitter sentiment [assignment]: /text/en/tweets

    Submit:
        Submit your solutions: /submit/text

Big data (SP1 - level 3):
    Introduction: /bigdata/en/

    Big data:
        Learn about file I/O (repeated if you did Text) [theory]: /python/en/file-io
        Learn to analyse and process a data set (repeated if you did Text) [theory]: /python/en/files
        Process sensor data of a car ride [assignment]: /bigdata/en/car
        Learn more about functions [theory]: /python/en/functions3
        Dig around in KNMI temperature data [assignment]: /bigdata/en/temperatures

    Submit:
        Submit your solutions: /submit/bigdata

Physics of movement (SP1 - BONUS):
    Animating in Python:
        Learn how to create animated graphics [theory]: /animation/en/explanation
        A spiraling dot [assignment]: /animation/en/dot
        Explore the movements of a buzzed student [assignment]: /animation/en/student
    Gravitational movement:
        Introduction: /movement/en/
        Learn more about functions [theory]: /python/en/functions3
        Study the movement of a falling apple [assignment]: /movement/en/apple
        Read up on the use of plotting with multiple graphs [theory]: /python/en/plotting
        Study a basejumper's movement [assignment]: /movement/en/basejump
    The ultimate freefall:
        Learn more about debugging simulations [theory]: /python/en/debugging
        What happens when you fall through the earth [assignment]: /movement/en/freefall
    Submit:
        Submit your solutions: /submit/movement

Practice Exam:
    Practice exam: /exams/sp1/practice

Monopoly (SP2 - level 4):
    Animating in Python:
        Learn how to create animated graphics [theory]: /animation/en/explanation
        A spiraling dot [assignment]: /animation/en/dot
        Explore the movements of a buzzed student [assignment]: /animation/en/student
    Monopoly:
        Introduction: /monopoly/en/
        Learn about debugging simulations [theory]: /python/en/debugging
        Moving around the board [assignment]: /monopoly/en/moving-around
        Using starting funds and buying stuff [assignment]: /monopoly/en/money
        Add a player and restore the balance [assignment]: /monopoly/en/two-player
    Submit:
        Submit your solutions: /submit/monopoly

Complexity (SP2 - level 5):
    Introduction: /complexity
    "Part 1: Computational complexity":
        Complexity [theory]: /python/en/efficiency
        Complexity questions 1 [assignment]: /complexity/questions1
    "Part 2: Data structures":
        Dictionaries [theory]: /python/en/dictionaries/use
        Dictionaries [practice]: /python/en/dictionaries/use/practice
        Efficiency of dictionaries [theory]: /python/en/dictionaries/complexity
        Efficiency of dictionaries [practice]: /python/en/dictionaries/complexity/practice
        Tuples [theory]: /python/en/tuples
        Sets [theory]: /python/en/sets
        Sets [practice]: /python/en/sets/practice
        List slicing and indexing [theory]: /python/en/slicing
    "Part 3: Optimizing code":
        Applying big O in your code [theory]: /python/en/big-o
        Improving count_occurrence [theory]: /python/en/big-o-example
        Complexity questions 2 [assignment]: /complexity/questions2
        Jaccard [assignment]: /complexity/jaccard
    "Part 4: Indexing":
        Indexing words [assignment]: /complexity/word-index
    Submit your solutions: /submit/complexity

Survival (SP2 - level 6):
    Introduction: /survival/
    "Part 1: Pandas":
        Pandas (assignment): /survival/pandas
    "Part 2: Survival":
        Survival (assignment): /survival/survival
    Submit your solutions: /submit/survival

Practice Exam:
    Practice exam: /exam/sp2/practice

Populations (DP - level 7, graded):
    Introduction: /populations-oo
    Classes:
        Learn about using classes in Python [theory]: /python/en/classes
        Practice with classes [practice]: /objects/cards
    Default parameters:
        Default parameters: /populations-oo/default_params
    Populations (part 1):
        Introduction: /populations-oo/introduction
        Phase 1: /populations-oo/phase1
        Phase 2: /populations-oo/phase2
        Phase 3: /populations-oo/phase3
        Phase 4: /populations-oo/phase4
        Phase 5: /populations-oo/phase5
        Phase 6: /populations-oo/phase6
        Phase 7: /populations-oo/phase7
        Phase 8: /populations-oo/phase8
        Phase 9: /populations-oo/phase9
    Theory:
        Keyword arguments [theory]: /populations-oo/kwargs
        Sampling methods [theory]: /populations-oo/sampling
    Populations (part 2):
        Experiment: /populations-oo/experimenting
        Visualize: /populations-oo/visualizing
    Submit your solutions: /submit/populations

Acquisition (DP - level 8, pass/fail):
    Introduction: "/acquisition"
    HTML:
        What is HTML?: /acquisition/html
        Make your own website: /acquisition/homepage
    # # no homepage:
    # HTML:
    #     What is a website?: /acquisition/html-short
    More Pandas:
        Improve your Pandas skills: "/acquisition/pandas"
    Scraping:
        Scrape a web page: "/acquisition/scraping"
        Transforming data to be more usable: "/acquisition/transforming"
        Visualizing the data: "/acquisition/visualizing"
    Crawling:
        Get even more data: "/acquisition/crawling"
    Submit: "/acquisition/submit"

Transformation (DP - level 9, graded):
    Introduction: /transformation/
    Transform and visualize climate data: /transformation/climate-change
    Work with structured data in health:
        "Part one: merging the data": /transformation/health-code-violations-1
        "Part two: processing the data": /transformation/health-code-violations-2
    Submit: /transformation/submit

Databases (DP - level 10, pass/fail):
    Introduction: /sql/intro
    Learn SQL:
        Learn about Databases: /sql/lecture
        Store movie information using sqlite: /sql/movies
    Fiftyville:
        Solve a mistery using sqlite: /sql/fiftyville
    Submit: /sql/submit

Final project (DP - graded):
    Learn to use git: /basics/git
    Project: /project
    Submit: /project/submit

#
# Exam:
#     Exam: /exam/exam
