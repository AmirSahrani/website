templates:
    1: &check
        hide_calculated: true
        type: integer
        subgrades:
            completely_correct: boolean
            mostly_correct: boolean
            insufficient: boolean
            checkpy: integer
        automatic:
            checkpy: correctness_score
        calculation: "[insufficient == -1 && 0 || -10, mostly_correct == -1 && 2 || -10, completely_correct == -1 && 3 || -10].max"

    2: &check-man
        hide_calculated: true
        type: integer
        subgrades:
            completely_correct: boolean
            mostly_correct: boolean
            insufficient: boolean
        calculation: "[insufficient == -1 && 0 || -10, mostly_correct == -1 && 2 || -10, completely_correct == -1 && 3 || -10].max"

    3: &testt
        type: pass
        subgrades:
            passed: boolean
            checkpy: integer
        automatic:
            checkpy: correctness_score
        calculation: passed
        hide_calculated: true

    4: &graded
        hide_calculated: true
        type: float
        subgrades:
            code_quality: integer
            correctness: integer
        calculation: "1.0 + 9.0 * (3.0 * correctness + 2.0 * code_quality - 5.0) / 20.0"

grades:
    algorithms:
        <<: *check
    numbers:
        <<: *check
    text:
        <<: *check
    integrals:
        <<: *check
    bigdata-en:
        <<: *check
    movement_(bonus):
        <<: *check

    sp1-exam1:
        <<: *testt
    sp1-exam2:
        <<: *testt
    sp1-exam3:
        <<: *testt
    sp1-exam4:
        <<: *testt

    monopoly-en:
        <<: *check
    q1_complexity:
        type: pass
        subgrades:
            correct: boolean
        calculation: correct
        hide_subgrades: true
    q2_complexity:
        type: pass
        subgrades:
            correct: boolean
        calculation: correct
        hide_subgrades: true
    q3_complexity:
        type: pass
        subgrades:
            correct: boolean
        calculation: correct
        hide_subgrades: true
    complexity:
        <<: *check-man
    survival: *check-man

    sp2-exam1:
        <<: *testt
    sp2-exam2:
        <<: *testt
    sp2-exam3:
        <<: *testt
    sp2-exam4:
        <<: *testt

    populations: *graded
    acquisition: *check-man
    scraping-data: *check-man
    transformation: *graded
    databases: *check-man
    project:
        type: float
        subgrades:
            novelty: integer
            quality: integer
        calculation: "(1.0 + 9.0 * (novelty * 7.0 + quality * 3.0 - 10.0) / 40.0).round(1)"

sp1_modules:
    show_progress: true
    submits:
        algorithms: 1
        numbers: 1
        text: 1
        integrals: 1
        bigdata-en: 1
        movement_(bonus): 1
    required: true

sp1_exams:
    show_progress: true
    submits:
        sp1-exam1: 1
        sp1-exam2: 1
        sp1-exam3: 1
        sp1-exam4: 1
    required: true

sp2_modules:
    show_progress: true
    submits:
        monopoly-en: 1
        q1_complexity: 1
        q2_complexity: 1
        q3_complexity: 1
        complexity: 1
        populations: 1

sp2_exams:
    show_progress: true
    submits:
        sp2-exam1: 1
        sp2-exam2: 1
        sp2-exam3: 1
        sp2-exam4: 1
    required: true

data_modules:
    show_progress: true
    submits:
        survival: 25
        scraping-data: 1
        transformation: 25
        databases: 1
        project: 50
